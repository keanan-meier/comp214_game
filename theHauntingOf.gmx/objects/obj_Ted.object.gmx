<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Ted_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
grav = 1;
hspd = 0;
vspd = 0;
jumpSpeed = 22.5;
moveSpeed = 4;
hit = 0;
count = 0;
caught = 0;

rightSpr = 0;
leftSpr = 0;
hitSpr = 0;
idleSpr = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>game_Music</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(vk_right);
key_left = keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_space);
Key_down = keyboard_check(vk_down);

if (global.distance &lt; global.level1 + 50) { //LEVEL 1
    rightSpr = spr_Ted_right;
    leftSpr = spr_Ted_left;
    idleSpr = spr_Ted_idle;
    hitSpr = spr_Ted_hit;
}else if (global.distance &lt; global.level2 + 50) { //LEVEL 2
    rightSpr = spr_Ted_right_2;
    leftSpr = spr_Ted_left_2;
    idleSpr = spr_Ted_idle_2;
    hitSpr = spr_Ted_hit_2;
}else { //LEVEL 3
    rightSpr = spr_Ted_right_3;
    leftSpr = spr_Ted_left_3;
    idleSpr = spr_Ted_idle_3;
    hitSpr = spr_Ted_hit_3;
}

// Check for ground
if (place_meeting(x, y+1, obj_ground)) {
    vspd = 0;
    
    //Jumping
    if (key_jump) {
        vspd = -jumpSpeed;
    }
} else {
    //apply gravity
    if (vspd &lt; 15) {
        vspd += grav;
    }
}
// Move right
if(key_right) {
    hspd = moveSpeed;
    if(hit = 0){
        sprite_index = rightSpr;
    }

}
// Move left
if(key_left) {
    hspd = (-moveSpeed) + global.scrollSpeed; 
    if(hit = 0){ 
        sprite_index = leftSpr;
    }
}
// Check for idle
if ((!key_left &amp;&amp; !key_right) || (key_left &amp;&amp; key_right)){
    hspd = global.scrollSpeed;
    if(hit = 0){
        sprite_index = idleSpr;
    }
}

// Horizontal collisions
//if (place_meeting(x+hspd, y, obj_ground)) {
//    while (!place_meeting(x+sign(hspd), y, obj_ground)) {
//        x+= sign(hspd);
//    }
//    hspd = 0;
//}

if (place_meeting(x+50, y, obj_ground)) {
    if(hspd &gt; 0){
        hspd = 0;
    }
}
if (place_meeting(x-50, y, obj_ground)) {
    if(hspd &lt; 0){
        hspd = 0;
    }
}

//check if hit obstacle
 if (place_meeting(x, y, obj_obstacle)){
    if(hit == 0){
    hit = 1;
    sprite_index = hitSpr;
    }
}

//check if hit responsibility
 if (place_meeting(x, y, obj_responsibilty)){
    if(caught == 0){
    caught = 1;
    sprite_index = hitSpr;
    }
}

if(caught == 1){
    count++
    global.scrollSpeed = 0;
    hspd = 0;
    
    if(count == 30){
        room_goto(rm_gamveover);
    }
    
}

if(hit == 1){
    count++;
    hspd = global.scrollSpeed - 5;
    
    if(count == 30){
        hit = 0;
        count = 0;      
    }
}

// Move horizontally
x += hspd;

// Vertical collisions
if (place_meeting(x, y+vspd, obj_ground)) {
    while (!place_meeting(x, y+sign(vspd), obj_ground)) {
        y+= sign(vspd);
    }
    vspd = 0;
}

// Move horizontally
y += vspd;


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
